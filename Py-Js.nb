# %% [markdown]
# Python / JS conversions
# %% [markdown]
Reference: [Pyodide Type Translations](https://pyodide.org/en/stable/usage/type-conversions.html)
# %% [python]
import js
# %% [markdown]
## From Python
# %% [markdown]
### Named function parameters 

In Javascript, you can to specify function parameters by name using [destructing assignment](https://javascript.info/destructuring-assignment#smart-function-parameters):
# %% [javascript]
function configure({help = false, verbose = false} = {}) {
  console.log("help: ", help, ", verbose :", verbose);
}
# %% [javascript]
// Javascript ☕
configure()
configure({help: true})
configure({help: true, verbose: true})
# %% [markdown]
In Python, you would use keyword arguments, so that's what you should do to call such javascript functions:
# %% [python]
# Python 🐍
js.configure()
js.configure(help=True)
js.configure(help=True, verbose=True)
# %% [markdown]
⚠️ **Warning.** Note that you may be tempted to use Python dict instead of keyword argument. That would be less Pythonic and it also wouldn't work as you expect.
# %% [python]
# Please don't do that 🥺
js.configure({"help": True, "verbose": True}) # Not the result you were expecting?
# %% [markdown]
This happens because your python dictionary is not automatically converted to a plain javascript object, but proxied instead. And Javascript doesn't know how to destructure your proxy (which could actually proxy for many types of Python objects, not merely a dict).
# %% [python]
js.console.log({"help": True, "verbose": True})
# %% [markdown]
If you have a dictionary of arguments to start with, use `**` to unpack it:
# %% [javascript]
options = {"help": True, "verbose": True}
js.configure(**options)
# %% [markdown]
**TODO.** New section: handling POJOs from Python (star with Yagni, see above).
That doesn't solve the issue of calling from Python a javascript function which is expecting two javascript objects though ...
I know how to solve the issue from the Javascript side (**Update:** No I don't!), but it's not totally satisfying.
# %% [javascript]
function f(obj1, obj2) {
  let {x: x1, y: y1} = obj1;
  let {x: x2, y: y2} = obj2;
  console.log(x1);
  console.log(y1);
  console.log(x2);
  console.log(y2); 
}

f({x: 1}, {y: 2})
# %% [javascript]
// Need to adapt f for python
function py_f(p1, p2) {
  obj1 = p1.toJs({dict_converter : Object.fromEntries}); 
  obj2 = p2.toJs({dict_converter : Object.fromEntries});
  // console.log(obj2, obj2); // still have proxies; didn't work as expected ... 
  // my guess: an old version of pyodide is used in starboard (?) and the dict_converter argument is discarded
  // TODO: test manually in pyodide.
  console.log(p1.toJs()); // here, ok, I have a map.
  return f(p1.toJs(), p2.toJs()); // Maps are not good enough for destructuring??? 
  // Nah, ok, that is expected, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
  // Maps are not "object-like".
}
# %% [python]
js.py_f({"x": 1, "y": 2}, {"x": 0, "y": 0})
# %% [javascript]
// Trying something else:
function POJO(obj) { // Niiiice. Now find a better name?
  return obj
}
# %% [python]
js.POJO(x=1, y=2)
# %% [python]
js.f(js.POJO(x=1, y=2), js.POJO(x=0, y=0)) ### AHHHHHH that works, document this!
# %% [python]
js.f(js.Object(x=1, y=2), js.Object(x=0, y=0)) ### AHHHHHH that works, document this one! Far better than the alternatives AFAICT!
### TODO: also document WHY it works and display the POJO identity function to explain how the whole stuff works.
# TODO: link to  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
# and quote the > If the value is an object already, it will return the value.
# part. This is magic :) 🪄
# %% [markdown]
# TODO: ES Modules